zabbix_export:
  version: '7.4'
  template_groups:
    - uuid: 9606d0fbf903494c822af2acb5ae580b
      name: iot-devices
  templates:
    - uuid: 8ad78bcf27e94db0903407ed5bdfb245
      template: template-mqtt-devices-iot
      name: template-mqtt-devices-iot
      groups:
        - name: iot-devices
      items:
        - uuid: 4241523c2505420ba7effbba85870c8e
          name: mqtt.telemetry.raw.all_devices
          type: ZABBIX_ACTIVE
          key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{$MQTT.TOPIC.TELEMETRY}","{$MQTT_USER}","{$MQTT_PASS}"]'
          history: 365d
          value_type: TEXT
          description: |
            mqtt.get["{$IPMQTTGATEWAY}:1883","airq/devices/+/telemetria",{$USERMQTTGATEWAY},{$PWDMQTTGATEWAY}]
            
            Processamento utiliza o script: mqtt.telemetry.raw.all_devices.js
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  // Zabbix JS (ES5) – remove o envelope do tópico e normaliza números
                  function toNum(v) {
                    if (v === null || v === undefined || v === "") return null;
                    v = String(v).replace(",", ".");
                    var n = Number(v);
                    return isNaN(n) ? v : n;
                  }
                  
                  function normalizeNumbers(p) {
                    // converta apenas os campos esperados
                    var keys = ["co","temperatura","pressao","pm10","pm25","o3","no2","so2","umidade","lat","lon"];
                    for (var i = 0; i < keys.length; i++) {
                      var k = keys[i];
                      if (p.hasOwnProperty(k)) p[k] = toNum(p[k]);
                    }
                    return p;
                  }
                  
                  var raw = value;
                  
                  // 1) Tente interpretar 'raw' como objeto envelope { "<topico>": "<json-string>" }
                  var outer;
                  try {
                    outer = JSON.parse(raw);
                  } catch (e1) {
                    // Talvez já seja o payload puro
                    try {
                      return JSON.stringify(normalizeNumbers(JSON.parse(raw)));
                    } catch (e2) {
                      return raw; // não é JSON, devolve como veio
                    }
                  }
                  
                  // 2) Obtenha o primeiro valor do envelope (payload)
                  var payloadStr = null;
                  if (outer && typeof outer === "object") {
                    for (var prop in outer) {
                      if (outer.hasOwnProperty(prop)) {
                        payloadStr = outer[prop];
                        break;
                      }
                    }
                  }
                  
                  // 3) Se já veio objeto, normalize e devolva
                  if (payloadStr && typeof payloadStr === "object") {
                    return JSON.stringify(normalizeNumbers(payloadStr));
                  }
                  
                  // 4) Caso geral: é uma string JSON com aspas escapadas → parse de novo
                  try {
                    var payload = JSON.parse(payloadStr);
                    return JSON.stringify(normalizeNumbers(payload));
                  } catch (e3) {
                    // Falhou o parse interno: devolve string sem envelope
                    return payloadStr;
                  }
      discovery_rules:
        - uuid: 6b9c5fe311614147ba5b61a12078a3c8
          name: iot.devices.discovery.from_telemetry
          type: DEPENDENT
          key: lld.device.discovery
          lifetime: 30d
          enabled_lifetime_type: DISABLE_NEVER
          item_prototypes:
            - uuid: f393ed85e1614131a8ef22daa5e9ec03
              name: '[{#DEVICEID}] - CO (ppm) - Média móvel 1h'
              type: CALCULATED
              key: 'airq.co.hourly_mean[{#DEVICEID}]'
              delay: 0;m0
              history: 365d
              value_type: FLOAT
              units: ppm
              params: 'avg(//airq.co.now[{#DEVICEID}],1h)'
              description: 'Média fixa por hora (histórico segmentado): Calcula a média de cada hora do dia.'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: CO
            - uuid: 8deec903c85a44aaa1f754cba3e22824
              name: '[{#DEVICEID}] - CO (ppm) - Tempo Real'
              type: DEPENDENT
              key: 'airq.co.now[{#DEVICEID}]'
              history: 365d
              value_type: FLOAT
              units: ppm
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.co
              master_item:
                key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{#TOPIC_TEL}","{$MQTT_USER}","{$MQTT_PASS}"]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: CO
            - uuid: d60537a509244e479f39fbd78f099869
              name: '[{#DEVICEID}] - CO (ppm) - Média móvel 8h'
              type: CALCULATED
              key: 'airq.co.rolling24h[{#DEVICEID}]'
              delay: 0;m5
              history: 365d
              value_type: FLOAT
              units: ppm
              params: 'avg(//airq.co.hourly_mean[{#DEVICEID}],8h)'
              description: 'Calcula a média móvel das últimas 8h'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: CO
            - uuid: a60758e37c484e1aaff3bbde10742593
              name: '[{#DEVICEID}] - Umidade do Ar'
              type: DEPENDENT
              key: 'airq.humidity.now[{#DEVICEID}]'
              history: 365d
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.umidade
              master_item:
                key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{#TOPIC_TEL}","{$MQTT_USER}","{$MQTT_PASS}"]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: 'Umidade do Ar'
            - uuid: 1dba7cc672e0409b8dc365378a06f277
              name: '[{#DEVICEID}] - NO2 (µg/m³) - Média móvel 1h'
              type: CALCULATED
              key: 'airq.no2.hourly_mean[{#DEVICEID}]'
              delay: 0;m0
              history: 365d
              value_type: FLOAT
              units: µg/m³
              params: 'avg(//airq.no2.now[{#DEVICEID}],1h)'
              description: 'Média fixa por hora (histórico segmentado): Calcula a média de cada hora do dia.'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: NO2
            - uuid: 9a508ee039b64718ac0f63d6387611ce
              name: '[{#DEVICEID}] - NO2 (µg/m³) - Tempo Real'
              type: DEPENDENT
              key: 'airq.no2.now[{#DEVICEID}]'
              history: 365d
              units: µg/m³
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.no2
              master_item:
                key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{#TOPIC_TEL}","{$MQTT_USER}","{$MQTT_PASS}"]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: NO2
            - uuid: e81eef24b8764cc8bd2720c871fe8404
              name: '[{#DEVICEID}] - O3 (µg/m³) - Média móvel 1h'
              type: CALCULATED
              key: 'airq.o3.hourly_mean[{#DEVICEID}]'
              delay: 0;m0
              history: 365d
              value_type: FLOAT
              units: µg/m³
              params: 'avg(//airq.o3.now[{#DEVICEID}],1h)'
              description: 'Média fixa por hora (histórico segmentado): Calcula a média de cada hora do dia.'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: O3
            - uuid: e6be5d0cdef54e6fa157e06c190e5695
              name: '[{#DEVICEID}] - O3 (µg/m³) - Tempo Real'
              type: DEPENDENT
              key: 'airq.o3.now[{#DEVICEID}]'
              history: 365d
              units: µg/m³
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.o3
              master_item:
                key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{#TOPIC_TEL}","{$MQTT_USER}","{$MQTT_PASS}"]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: O3
            - uuid: 06698e577fa641e88d89440d86a71ef3
              name: '[{#DEVICEID}] - O3 (µg/m³) - Média móvel 8h'
              type: CALCULATED
              key: 'airq.o3.rolling24h[{#DEVICEID}]'
              delay: 0;m5
              history: 365d
              value_type: FLOAT
              units: µg/m³
              params: 'avg(//airq.o3.hourly_mean[{#DEVICEID}],8h)'
              description: 'Calcula a média móvel das últimas 8h'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: O3
            - uuid: 84e74179cf534ba3bb4fb5884a05fd49
              name: '[{#DEVICEID}] - PM10 (µg/m³) - Média móvel 1h'
              type: CALCULATED
              key: 'airq.pm10.hourly_mean[{#DEVICEID}]'
              delay: 0;m0
              history: 365d
              value_type: FLOAT
              units: µg/m³
              params: 'avg(//airq.pm10.now[{#DEVICEID}],1h)'
              description: 'Média fixa por hora (histórico segmentado): Calcula a média de cada hora do dia.'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: PM10
            - uuid: a1e2cdb333944979ae751cab46c694d8
              name: '[{#DEVICEID}] - PM10 (µg/m³) - Tempo Real'
              type: DEPENDENT
              key: 'airq.pm10.now[{#DEVICEID}]'
              history: 365d
              units: µg/m³
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.pm10
              master_item:
                key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{#TOPIC_TEL}","{$MQTT_USER}","{$MQTT_PASS}"]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: PM10
            - uuid: 8531a4dd4ac54a5d8257f28c19664919
              name: '[{#DEVICEID}] - PM10 (µg/m³) - Média móvel 24h'
              type: CALCULATED
              key: 'airq.pm10.rolling24h[{#DEVICEID}]'
              delay: 0;m5
              history: 365d
              value_type: FLOAT
              units: µg/m³
              params: 'avg(//airq.pm10.hourly_mean[{#DEVICEID}],24h)'
              description: 'Calcula a média móvel das últimas 24h'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: PM10
            - uuid: 33277d8d9e084625a2110bba76bf7635
              name: '[{#DEVICEID}] - PM10 (µg/m³) - Média móvel 24h (últimas 24)'
              type: CALCULATED
              key: 'airq.pm10.rollinglast24[{#DEVICEID}]'
              delay: 0;m5
              history: 365d
              value_type: FLOAT
              units: µg/m³
              params: 'avg(//airq.pm10.hourly_mean[{#DEVICEID}],#24)'
              description: 'Calcula a média móvel das últimas 24h'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: PM10
            - uuid: 06e8f18dc0c84df4841b82953cd5fbc4
              name: '[{#DEVICEID}] - PM2.5 (µg/m³) - Média móvel 1h'
              type: CALCULATED
              key: 'airq.pm25.hourly_mean[{#DEVICEID}]'
              delay: 0;m0
              history: 365d
              value_type: FLOAT
              units: µg/m³
              params: 'avg(//airq.pm25.now[{#DEVICEID}],1h)'
              description: 'Média fixa por hora (histórico segmentado): Calcula a média de cada hora do dia.'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: PM2.5
            - uuid: 9dc79ac8caaf440ba18a1ea257f72d20
              name: '[{#DEVICEID}] - PM2.5 (µg/m³) - Tempo Real'
              type: DEPENDENT
              key: 'airq.pm25.now[{#DEVICEID}]'
              history: 365d
              units: µg/m³
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.pm25
              master_item:
                key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{#TOPIC_TEL}","{$MQTT_USER}","{$MQTT_PASS}"]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: PM2.5
            - uuid: 0cbc2dd7047c4463aee86f770a59d64a
              name: '[{#DEVICEID}] - PM2.5 (µg/m³) - Média móvel 24h'
              type: CALCULATED
              key: 'airq.pm25.rolling24h[{#DEVICEID}]'
              delay: 0;m5
              history: 365d
              value_type: FLOAT
              units: µg/m³
              params: 'avg(//airq.pm25.hourly_mean[{#DEVICEID}],24h)'
              description: 'Calcula a média móvel das últimas 24h'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: PM2.5
            - uuid: 9c3ab1e9fad748c89387ce12128eae64
              name: '[{#DEVICEID}] - Pressão'
              type: DEPENDENT
              key: 'airq.pressure.now[{#DEVICEID}]'
              history: 365d
              units: hPa
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.pressao
              master_item:
                key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{#TOPIC_TEL}","{$MQTT_USER}","{$MQTT_PASS}"]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: Pressão
            - uuid: abf3f51890c74200af3bbafb2bae1638
              name: '[{#DEVICEID}] - SO2 (µg/m³) - Média móvel 1h'
              type: CALCULATED
              key: 'airq.so2.hourly_mean[{#DEVICEID}]'
              delay: 0;m0
              history: 365d
              value_type: FLOAT
              units: µg/m³
              params: 'avg(//airq.so2.now[{#DEVICEID}],1h)'
              description: 'Média fixa por hora (histórico segmentado): Calcula a média de cada hora do dia.'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: SO2
            - uuid: 05f8bad693cd4418a27708a7d185783a
              name: '[{#DEVICEID}] - SO2 (µg/m³) - Tempo Real'
              type: DEPENDENT
              key: 'airq.so2.now[{#DEVICEID}]'
              history: 365d
              units: µg/m³
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.so2
              master_item:
                key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{#TOPIC_TEL}","{$MQTT_USER}","{$MQTT_PASS}"]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: SO2
            - uuid: 8f9448cb5ba3413ea7e27d2f0466501c
              name: '[{#DEVICEID}] - SO2 (µg/m³) - Média móvel 24h'
              type: CALCULATED
              key: 'airq.so2.rolling24h[{#DEVICEID}]'
              delay: 0;m5
              history: 365d
              value_type: FLOAT
              units: µg/m³
              params: 'avg(//airq.so2.hourly_mean[{#DEVICEID}],24h)'
              description: 'Calcula a média móvel das últimas 24h'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: SO2
            - uuid: 5f9168ce6abb492cb3c1a464645acbfd
              name: '[{#DEVICEID}] - Temperatura'
              type: DEPENDENT
              key: 'airq.temperature.now[{#DEVICEID}]'
              history: 365d
              units: ºC
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.temperatura
              master_item:
                key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{#TOPIC_TEL}","{$MQTT_USER}","{$MQTT_PASS}"]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Sensor
                  value: Temperatura
            - uuid: 9f8bba6a50e54236952a929f27e9a1d4
              name: '[{#DEVICEID}] - IQAr - CO'
              type: DEPENDENT
              key: 'co.iqar.hour[{#DEVICEID}]'
              history: 365d
              value_type: FLOAT
              description: |
                ÍNDICE DE QUALIDADE DO AR (IQAr).
                
                Processamento utiliza o script iqar-co.js
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      // value = média móvel 8h do CO (ppm)
                      var C = parseFloat(value);
                      if (!isFinite(C)) { return; } // sem dado
                      
                      // Tabela de faixas (Índice x Concentração) – CO
                      var bands = [
                        { Imin: 0,   Imax: 40,  Cmin: 0,    Cmax: 9   },
                        { Imin: 41,  Imax: 80,  Cmin: 9.0000001, Cmax: 11  },
                        { Imin: 81,  Imax: 120, Cmin: 11.0000001, Cmax: 13 },
                        { Imin: 121, Imax: 200, Cmin: 13.0000001, Cmax: 15 },
                        { Imin: 201, Imax: 400, Cmin: 15.0000001, Cmax: 50 }
                      ];
                      
                      // Encontra a faixa da concentração C
                      var b = null;
                      for (var i = 0; i < bands.length; i++) {
                        var x = bands[i];
                        if ((C >= x.Cmin) && (C <= x.Cmax)) { b = x; break; }
                      }
                      
                      // Tratamentos de borda
                      if (!b) {
                        if (C < 0) { return 0; } // satura inferior
                        // acima da última faixa: satura em Cmax para limitar o índice
                        b = bands[bands.length - 1];
                        C = Math.min(C, b.Cmax);
                      }
                      
                      // IQAr = Iini + (Ifin−Iini)/(Cfin−Cini) * (C−Cini)
                      var IQAr = b.Imin + ((b.Imax - b.Imin) / (b.Cmax - b.Cmin)) * (C - b.Cmin);
                      
                      // Arredonda para inteiro (como nos exemplos); troque para toFixed(1) se quiser 1 casa.
                      return Math.round(IQAr);
              master_item:
                key: 'airq.co.rolling24h[{#DEVICEID}]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: IQAr
                - tag: Sensor
                  value: CO
            - uuid: 4a87391bfe384054a7601bd420dd2f40
              name: 'mqtt.telemetry.raw[{#DEVICEID}]'
              type: ZABBIX_ACTIVE
              key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{#TOPIC_TEL}","{$MQTT_USER}","{$MQTT_PASS}"]'
              value_type: TEXT
              description: 'Processamento utilizar o script telemetrysanitizer.js'
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      var obj; 
                      try { obj = JSON.parse(value); } catch (e) { return value; }
                      
                      function toNum(v) {
                        if (v === null || v === undefined || v === "") return null;
                        v = String(v).replace(",", ".");
                        var n = Number(v);
                        return isNaN(n) ? null : n;
                      }
                      
                      if (obj.co !== undefined) obj.co = toNum(obj.co);
                      if (obj.temperatura !== undefined) obj.temperatura = toNum(obj.temperatura);
                      if (obj.pressao !== undefined) obj.pressao = toNum(obj.pressao);
                      
                      var keys = ["lat","lon","pm10","pm25","o3","no2","so2","umidade"];
                      for (var i = 0; i < keys.length; i++) {
                        var k = keys[i];
                        if (obj[k] !== undefined) obj[k] = toNum(obj[k]);
                      }
                      
                      return JSON.stringify(obj);
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: Estação
                  value: '{#STATION}'
                - tag: topic_mqtt
                  value: '{#TOPIC_TEL}'
            - uuid: 66c92aa1e82b42f9873e28fe4a507328
              name: '[{#DEVICEID}] - IQAr - NO2'
              type: DEPENDENT
              key: 'no2.iqar.hour[{#DEVICEID}]'
              history: 365d
              value_type: FLOAT
              description: |
                ÍNDICE DE QUALIDADE DO AR (IQAr).
                
                Processamento utiliza o script iqar-no2.js
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      // value = média móvel 1h do NO2 (µg/m³)
                      var C = parseFloat(value);
                      if (!isFinite(C)) { return; } // sem dado
                      
                      // Tabela de faixas (Índice x Concentração) – NO2
                      var bands = [
                        { Imin: 0,   Imax: 40,  Cmin: 0,    Cmax: 200   },
                        { Imin: 41,  Imax: 80,  Cmin: 200.0000001, Cmax: 240  },
                        { Imin: 81,  Imax: 120, Cmin: 240.0000001, Cmax: 320 },
                        { Imin: 121, Imax: 200, Cmin: 320.0000001, Cmax: 1130 },
                        { Imin: 201, Imax: 400, Cmin: 1130.0000001, Cmax: 3750 }
                      ];
                      
                      // Encontra a faixa da concentração C
                      var b = null;
                      for (var i = 0; i < bands.length; i++) {
                        var x = bands[i];
                        if ((C >= x.Cmin) && (C <= x.Cmax)) { b = x; break; }
                      }
                      
                      // Tratamentos de borda
                      if (!b) {
                        if (C < 0) { return 0; } // satura inferior
                        // acima da última faixa: satura em Cmax para limitar o índice
                        b = bands[bands.length - 1];
                        C = Math.min(C, b.Cmax);
                      }
                      
                      // IQAr = Iini + (Ifin−Iini)/(Cfin−Cini) * (C−Cini)
                      var IQAr = b.Imin + ((b.Imax - b.Imin) / (b.Cmax - b.Cmin)) * (C - b.Cmin);
                      
                      // Arredonda para inteiro (como nos exemplos); troque para toFixed(1) se quiser 1 casa.
                      return Math.round(IQAr);
              master_item:
                key: 'airq.no2.hourly_mean[{#DEVICEID}]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: IQAr
                - tag: Sensor
                  value: NO2
            - uuid: 6cd9ed5fdb7549a3a0236861390af3cd
              name: '[{#DEVICEID}] - IQAr - O3'
              type: DEPENDENT
              key: 'o3.iqar.hour[{#DEVICEID}]'
              history: 365d
              value_type: FLOAT
              description: |
                ÍNDICE DE QUALIDADE DO AR (IQAr).
                
                Processamento utiliza o script iqar-o3.js
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      // value = média móvel 8h do O3 (µg/m³)
                      var C = parseFloat(value);
                      if (!isFinite(C)) { return; } // sem dado
                      
                      // Tabela de faixas (Índice x Concentração) – O3
                      var bands = [
                        { Imin: 0,   Imax: 40,  Cmin: 0,    Cmax: 100   },
                        { Imin: 41,  Imax: 80,  Cmin: 100.0000001, Cmax: 130  },
                        { Imin: 81,  Imax: 120, Cmin: 130.0000001, Cmax: 160 },
                        { Imin: 121, Imax: 200, Cmin: 160.0000001, Cmax: 200 },
                        { Imin: 201, Imax: 400, Cmin: 200.0000001, Cmax: 800 }
                      ];
                      
                      // Encontra a faixa da concentração C
                      var b = null;
                      for (var i = 0; i < bands.length; i++) {
                        var x = bands[i];
                        if ((C >= x.Cmin) && (C <= x.Cmax)) { b = x; break; }
                      }
                      
                      // Tratamentos de borda
                      if (!b) {
                        if (C < 0) { return 0; } // satura inferior
                        // acima da última faixa: satura em Cmax para limitar o índice
                        b = bands[bands.length - 1];
                        C = Math.min(C, b.Cmax);
                      }
                      
                      // IQAr = Iini + (Ifin−Iini)/(Cfin−Cini) * (C−Cini)
                      var IQAr = b.Imin + ((b.Imax - b.Imin) / (b.Cmax - b.Cmin)) * (C - b.Cmin);
                      
                      // Arredonda para inteiro (como nos exemplos); troque para toFixed(1) se quiser 1 casa.
                      return Math.round(IQAr);
              master_item:
                key: 'airq.o3.rolling24h[{#DEVICEID}]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: IQAr
                - tag: Sensor
                  value: O3
            - uuid: bc6ebc9ba91e43428a9772621e9092df
              name: '[{#DEVICEID}] - IQAr - PM10'
              type: DEPENDENT
              key: 'pm10.iqar.hour[{#DEVICEID}]'
              history: 365d
              value_type: FLOAT
              description: |
                ÍNDICE DE QUALIDADE DO AR (IQAr).
                
                Processamento utiliza o script iqar-pm10.js
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      // value = média móvel 24h do PM10 (µg/m³)
                      var C = parseFloat(value);
                      if (!isFinite(C)) { return; } // sem dado
                      
                      // Tabela de faixas (Índice x Concentração) – PM10
                      var bands = [
                        { Imin: 0,   Imax: 40,  Cmin: 0,    Cmax: 45   },
                        { Imin: 41,  Imax: 80,  Cmin: 45.0000001, Cmax: 100  },
                        { Imin: 81,  Imax: 120, Cmin: 100.0000001, Cmax: 150 },
                        { Imin: 121, Imax: 200, Cmin: 150.0000001, Cmax: 250 },
                        { Imin: 201, Imax: 400, Cmin: 250.0000001, Cmax: 600 }
                      ];
                      
                      // Encontra a faixa da concentração C
                      var b = null;
                      for (var i = 0; i < bands.length; i++) {
                        var x = bands[i];
                        if ((C >= x.Cmin) && (C <= x.Cmax)) { b = x; break; }
                      }
                      
                      // Tratamentos de borda
                      if (!b) {
                        if (C < 0) { return 0; } // satura inferior
                        // acima da última faixa: satura em Cmax para limitar o índice
                        b = bands[bands.length - 1];
                        C = Math.min(C, b.Cmax);
                      }
                      
                      // IQAr = Iini + (Ifin−Iini)/(Cfin−Cini) * (C−Cini)
                      var IQAr = b.Imin + ((b.Imax - b.Imin) / (b.Cmax - b.Cmin)) * (C - b.Cmin);
                      
                      // Arredonda para inteiro (como nos exemplos); troque para toFixed(1) se quiser 1 casa.
                      return Math.round(IQAr);
              master_item:
                key: 'airq.pm10.rolling24h[{#DEVICEID}]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: IQAr
                - tag: Sensor
                  value: PM10
            - uuid: 59dacd046d2c4680914cfdddfb6b1a75
              name: '[{#DEVICEID}] - IQAr - PM2.5'
              type: DEPENDENT
              key: 'pm25.iqar.hour[{#DEVICEID}]'
              history: 365d
              value_type: FLOAT
              description: |
                ÍNDICE DE QUALIDADE DO AR (IQAr).
                
                Processamento utiliza o script iqar-pm25.js
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      // value = média móvel 24h do PM2.5 (µg/m³)
                      var C = parseFloat(value);
                      if (!isFinite(C)) { return; } // sem dado
                      
                      // Tabela de faixas (Índice x Concentração) – PM2.5
                      var bands = [
                        { Imin: 0,   Imax: 40,  Cmin: 0,    Cmax: 15   },
                        { Imin: 41,  Imax: 80,  Cmin: 15.0000001, Cmax: 50  },
                        { Imin: 81,  Imax: 120, Cmin: 50.0000001, Cmax: 75 },
                        { Imin: 121, Imax: 200, Cmin: 75.0000001, Cmax: 125 },
                        { Imin: 201, Imax: 400, Cmin: 125.0000001, Cmax: 300 }
                      ];
                      
                      // Encontra a faixa da concentração C
                      var b = null;
                      for (var i = 0; i < bands.length; i++) {
                        var x = bands[i];
                        if ((C >= x.Cmin) && (C <= x.Cmax)) { b = x; break; }
                      }
                      
                      // Tratamentos de borda
                      if (!b) {
                        if (C < 0) { return 0; } // satura inferior
                        // acima da última faixa: satura em Cmax para limitar o índice
                        b = bands[bands.length - 1];
                        C = Math.min(C, b.Cmax);
                      }
                      
                      // IQAr = Iini + (Ifin−Iini)/(Cfin−Cini) * (C−Cini)
                      var IQAr = b.Imin + ((b.Imax - b.Imin) / (b.Cmax - b.Cmin)) * (C - b.Cmin);
                      
                      // Arredonda para inteiro (como nos exemplos); troque para toFixed(1) se quiser 1 casa.
                      return Math.round(IQAr);
              master_item:
                key: 'airq.pm25.rolling24h[{#DEVICEID}]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: IQAr
                - tag: Sensor
                  value: PM2.5
            - uuid: 4a47fe07af834ad19d36be1f349381a3
              name: '[{#DEVICEID}] - IQAr - SO2'
              type: DEPENDENT
              key: 'so2.iqar.hour[{#DEVICEID}]'
              history: 365d
              value_type: FLOAT
              description: |
                ÍNDICE DE QUALIDADE DO AR (IQAr).
                
                Processamento utiliza o script iqar-so2.js
              preprocessing:
                - type: JAVASCRIPT
                  parameters:
                    - |
                      // value = média móvel 24h do SO2 (µg/m³)
                      var C = parseFloat(value);
                      if (!isFinite(C)) { return; } // sem dado
                      
                      // Tabela de faixas (Índice x Concentração) – SO2
                      var bands = [
                        { Imin: 0,   Imax: 40,  Cmin: 0,    Cmax: 40   },
                        { Imin: 41,  Imax: 80,  Cmin: 40.0000001, Cmax: 50  },
                        { Imin: 81,  Imax: 120, Cmin: 50.0000001, Cmax: 125 },
                        { Imin: 121, Imax: 200, Cmin: 125.0000001, Cmax: 800 },
                        { Imin: 201, Imax: 400, Cmin: 800.0000001, Cmax: 2620 }
                      ];
                      
                      // Encontra a faixa da concentração C
                      var b = null;
                      for (var i = 0; i < bands.length; i++) {
                        var x = bands[i];
                        if ((C >= x.Cmin) && (C <= x.Cmax)) { b = x; break; }
                      }
                      
                      // Tratamentos de borda
                      if (!b) {
                        if (C < 0) { return 0; } // satura inferior
                        // acima da última faixa: satura em Cmax para limitar o índice
                        b = bands[bands.length - 1];
                        C = Math.min(C, b.Cmax);
                      }
                      
                      // IQAr = Iini + (Ifin−Iini)/(Cfin−Cini) * (C−Cini)
                      var IQAr = b.Imin + ((b.Imax - b.Imin) / (b.Cmax - b.Cmin)) * (C - b.Cmin);
                      
                      // Arredonda para inteiro (como nos exemplos); troque para toFixed(1) se quiser 1 casa.
                      return Math.round(IQAr);
              master_item:
                key: 'airq.so2.rolling24h[{#DEVICEID}]'
              tags:
                - tag: Dispositivo
                  value: '{#DEVICEID}'
                - tag: IQAr
                - tag: Sensor
                  value: SO2
          master_item:
            key: 'mqtt.get["{$MQTT_SCHEME}://{$IPMQTTGATEWAY}:{$MQTT_PORT}","{$MQTT.TOPIC.TELEMETRY}","{$MQTT_USER}","{$MQTT_PASS}"]'
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  // Gera {data:[{#DEVICEID}, {#STATION}, {#TOPIC_TEL}, {#LAT}, {#LON}]}
                  function toStr(v){ return (v===undefined||v===null) ? "" : String(v); }
                  var p;
                  try { p = JSON.parse(value); } catch(e) { return null; }
                  if (!p || !p.deviceId) return null;
                  
                  var out = { data: [ {
                    "{#DEVICEID}": toStr(p.deviceId),
                    "{#STATION}": toStr(p.station),
                    "{#TOPIC_TEL}": "airq/devices/"+toStr(p.deviceId)+"/telemetria",
                    "{#LAT}": toStr(p.lat),
                    "{#LON}": toStr(p.lon)
                  } ] };
                  return JSON.stringify(out);
      macros:
        - macro: '{$IPMQTTGATEWAY}'
          value: 10.33.33.10
          description: 'IP Gateway MQTT'
        - macro: '{$MQTT.TOPIC.TELEMETRY}'
          value: airq/devices/+/telemetria
        - macro: '{$MQTT_PASS}'
          value: senha@123
          description: 'Senha MQTT Client'
        - macro: '{$MQTT_PORT}'
          value: '1883'
          description: '1883 (ou 8883)'
        - macro: '{$MQTT_SCHEME}'
          value: tcp
          description: 'tcp (ou ssl, ws, wss)'
        - macro: '{$MQTT_USER}'
          value: zabbix
          description: 'Usuário MQTT Client'
